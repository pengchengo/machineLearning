import numpy as np
import matplotlib.pyplot as plt

class SingleLinearRegression:
    def __init__(self):   #初始化a,b
        self.a_=None;
        self.b_=None;

    def fit(self,x_train,y_train):  #训练函数，训练出a,b
        x_mean = np.mean(x_train)
        y_mean = np.mean(y_train)  # 求x和y的平均值

        fenzi = 0.0;
        fenmu = 0.0;  # 对分子分母初始化
        for x_i, y_i in zip(x_train, y_train):  # 将x,y打包成元组的形式
            fenzi += (x_i - x_mean) * (y_i - y_mean)  # 根据最小二乘法求出参数
            fenmu += (x_i - x_mean) ** 2

        self.a_ = fenzi / fenmu
        self.b_ = y_mean - self.a_ * x_mean  #得到a,b

        return self

    def predict(self,x_test_group):  #预测函数，用户输入一组x（为一维向量）,可以进行y的预测
        result=[]  #初始化一个列表，用来储存预测的y值
        for x_test in x_test_group:  #对于每个输入的x都计算它对应的预测y值并加入列表中
            result.append(self.a_*x_test+self.b_)
        y_predict=np.array(result)  #将列表转换为矩阵向量形式方便运算

        return y_predict

    def r_square(self,y_true,y_predict):  #打分函数，评估该模型的准确率
        mse=np.sum((y_true-y_predict)**2)/len(y_true)  #计算均方误差mse
        var=np.var(y_true)  #计算方差
        r=1-mse/var #计算拟合优度r的平方
        return r

if __name__=='__main__':
    x = np.array([40,34,47,45,47,55,51,61,60,46,59,62,40,48,58,45,68,66,52,57,58,61,42,56,59,52,36,59,47,65,101,60,50,126,60,48,52,65,63,58,54,49,55,52,50,41,43,38,71,65,47,59,90,34,49,43,42,62,53,57,48,35,51,73,68,60,83,61,54,62,56,84,61,53,57,73,51,54,81,67,61,45,63,70,78,43,64,69,56,42,57,68,66,71,94,53,62,66,59,54,52,67,90,79,52,68,51,63,85,75,81,62,67,59,55,67,72,71,79,50,47,59,12,72,59,71,73,70,63,62,64,70,49,62,68,73,66,76,53,97,58,70,65,60,55,78,68,84,57,65,58,64,70,56,57,58,65,63,62,62,73,60,70,79,65,68,49,72,54,64,57,61,90,79,43,45,71,57,43,56,54,60,81,46,51,65,42,54,81,57,70,65,67,77,80,73,54,69,57,47,91,65,76,59,60,82,68,51,73,54,35,52,69,78,48,67,51,74,55,52,56,41,53,73,29,72,30,58,70,55,47,50,43,53,70,65,46,54,55,70,70,44,49,63,60,58,45,47,45,59,52,26,32,63,38,30,46,56])
    y = np.array([230,230,230,230,240,180,230,230,240,180,180,180,180,180,180,150,180,180,180,180,180,180,230,180,230,180,230,180,230,480,500,480,230,480,360,230,230,240,360,230,320,230,230,230,300,230,230,230,230,230,230,230,230,150,150,180,150,230,230,230,230,180,180,230,230,230,230,230,230,270,230,230,210,230,240,240,230,230,240,230,230,230,230,230,230,230,230,230,230,230,230,240,230,230,230,230,230,240,230,230,230,230,300,220,230,280,240,230,420,240,400,230,230,230,230,230,230,240,240,230,230,230,230,230,230,230,230,230,230,230,230,230,230,230,270,240,210,210,230,300,230,230,260,255,230,260,230,230,230,230,230,230,230,230,230,230,230,245,230,230,240,230,230,230,230,230,230,260,260,230,230,230,230,300,230,230,240,240,230,230,230,230,240,230,230,230,230,230,230,240,230,230,230,230,230,230,230,230,230,230,230,230,240,230,230,230,230,230,230,230,230,230,230,230,230,230,230,230,230,230,230,230,230,230,230,230,230,230,230,230,230,180,230,230,230,300,230,230,300,230,230,200,230,230,240,230,230,230,230,230,230,90,230,230,120,120,230,180])
    l=SingleLinearRegression()  #创建一个对象，接下来调用对象的方法
    l.fit(x,y)
    print('6,8对应的的预测值是：')
    print(l.predict([6,8]))
    print('该模型的评估分数为：')
    print(l.r_square([8,9],l.predict([6,8])))
    print('l.a：',l.a_)
    print('l.b：',l.b_)
    #画出散点图和预测图
    plt.scatter(x, y, color='b')  # 画出原来值得散点图
    plt.plot(x,l.predict(x), color='r')  # 画出预测后的线

    plt.xlabel('x')  # 写上标签
    plt.ylabel('y')

    plt.show()  # 作图函数
